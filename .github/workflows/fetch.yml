name: fetch-sleeper

on:
  schedule:
    - cron: '5 * * * *'   # every hour at :05 UTC
  workflow_dispatch: {}     # manual "Run workflow" button

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # allow rebase/pull

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      # Quick sanity checks
      - name: Show Python and pip
        run: |
          python --version
          pip --version

      - name: Verify requests is installed
        run: |
          pip show requests || true
          python -c "import requests; print('requests imported OK:', requests.__version__)"

      - name: Fetch Sleeper snapshot
        run: python sleeper_fetch.py

      # Print Week 1 player-by-player stats for "Taylor Park Boys" in the logs
      - name: Summarize Week 1 for Taylor Park Boys
        run: |
          python -c 'import json,sys,os
p="data/sleeper/The-ick-Is-In/latest.json"
try:
    d=json.load(open(p,"r"))
except Exception as e:
    print("Could not read",p,"->",e); sys.exit(0)

# find your owner_id by team_name in users[]
owner_id=None
for u in d.get("users",[]):
    tn=(u.get("metadata",{}) or {}).get("team_name","")
    if isinstance(tn,str) and tn.strip().lower()=="taylor park boys":
        owner_id=u.get("user_id"); break

# find your roster_id from rosters[]
roster_id=None
if owner_id:
    for r in d.get("rosters",[]):
        if r.get("owner_id")==owner_id:
            roster_id=r.get("roster_id"); break
if roster_id is None:
    roster_id=10  # fallback from earlier snapshot

# prefer named week1, else raw
wk1_list=d.get("matchups_week1_named") or d.get("matchups_week1",[])
m=next((x for x in wk1_list if x.get("roster_id")==roster_id), None)
if not m:
    print("No Week 1 data for roster",roster_id); sys.exit(0)

named = isinstance(m.get("starters"),list) and len(m.get("starters") or [])>0 and isinstance((m["starters"] or [None])[0],dict)
pidx=d.get("players_index",{})

def display_name(pid):
    if isinstance(pid,str) and pid.isalpha() and 2<=len(pid)<=3:
        return f"{pid} D/ST"
    info=pidx.get(str(pid),{})
    return info.get("name") or str(pid)

starters=m.get("starters") or m.get("players") or []
ids=[(p.get("id") if isinstance(p,dict) else p) for p in starters]
pp=m.get("players_points",{})

rows=[]; total=0.0
for pid in ids:
    pts=float(pp.get(str(pid),0.0)); nm=None
    if named:
        for p2 in starters:
            if isinstance(p2,dict) and p2.get("id")==pid:
                nm=p2.get("name"); break
    nm = nm or display_name(pid)
    rows.append((nm,pts)); total+=pts

rows.sort(key=lambda x:x[1], reverse=True)
print("=== Week 1 â€” Taylor Park Boys ===")
for nm,pts in rows:
    print(f"{nm:28s} {pts:6.2f}")
print("------------------------------------")
print(f"Team total (Week 1):      {total:.2f}")'

      # Rebase on latest main (avoids push rejection if you edited in the UI)
      - name: Commit & push if changed
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main || true
          if [[ -n "$(git status --porcelain)" ]]; then
            git add -A data/sleeper/
            git commit -m "Update Sleeper snapshot"
            git push origin HEAD:main
          else
            echo "No changes to commit"
          fi
